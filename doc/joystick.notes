
some stuff from http://www.imaginaryindustries.com/blog/?p=80
http://www.imaginaryindustries.com/arduino/leoJoy/USBAPI.h etc

links
	http://forum.freetronics.com/viewtopic.php?t=734
	comments include a complete 32-button "joystick" done with a 4x8 
	diode matrix
	experimentally found he needs an analog axis for it to work sometimes
	has code we can study to expand.

http://www.imaginaryindustries.com/blog/helmpcb.com/electronics/usb-joystick
http://www.freebsddiary.org/APC/usb_hid_usages.php
http://www.usb.org/developers/hidpage#HID%20Descriptor%20Tool

from the comments:

Hi to fix that error (‘ring_buffer’ does not name a type
ring_buffer *_cdc_rx_buffer;) and others use this files. https://drive.google.com/file/d/0B1OHs6cMiH5FVjluSjhZcnItaWs/view?usp=sharing
	    -> JoyLeonardo.rar
	    with different HID.cpp, USBAPI.h
 Attributes      Size    Packed Ratio   Date   Time   Checksum  Name
----------- ---------  -------- ----- -------- -----  --------  ----
    ..A....     17736      4739  26%  26-02-15 00:43  1DF6F812  HID.cpp     
    ..A....      7439      2248  30%  26-02-15 00:28  BD078BDB  USBAPI.h    
----------- ---------  -------- ----- -------- -----  --------  ----


http://blog.qwertymodo.com/2012/11/arduino-hid-gamepad-part-2.html
	another crack at the same general idea.
	requires modifying arduino source tree


---

tried lots of hacking to get it to build with our previous Makefile mess.

to upload to arduino micro with avrdude:
   -c avr109 

push reset button, run avrdude while LED is "breathing" for 8 seconds
(and ttyACM* appears)

micro board:
green LED on PC7 aka io13
lights when high.

--

got basic blink to build using makefile structure from
https://travis-ci.org/sudar/Arduino-Makefile
(in /home/tell/proj/ec/arduino/arduino-makefile-git)

doesn't work with my own main.cpp.
does if I use the system one, which only adds 
  #if defined(USBCON)
         USBDevice.attach();
  #endif
and
 if (serialEventRun) serialEventRun();


--

JoyLeonardo.rar  / USBAPI.h 
vs 
/usr/share/arduino/hardware/arduino/cores/arduino/USBAPI.h from 
arduino-1.0.5-6.fc20.noarch

arduino-1.0.5 one dated Dec 29 2013

JoyLeonardo one does the usb serial port differently,
and always does #define HAVE_CDCSERIAL

HID.cpp - pretty much just adds the joystick


copied the  HID.cpp and USBAPI.h from JoyLeonardo.rar into the arduino libraries.

compile fails at:
                            ^
/usr/share/arduino/hardware/arduino//cores/arduino/USBCore.cpp: In function 'void __vector_10()':
/usr/share/arduino/hardware/arduino//cores/arduino/USBCore.cpp:615:11: error: 'class Serial_' has no member named 'accept'
    Serial.accept();
         ^

seems to exist in CDC if we define #ifdef CDC_ENABLED
but doesn't work.  

--

ok, we can try manually patching our USBAPI.h / HID.cpp
as per 
http://blog.qwertymodo.com/2012/11/arduino-hid-gamepad-part-2.html
first see if the HID keyboard stuff works in the stock setup.
yep, that works.


followed this blog closely, added it all inside an ifdef HID_JOYSTICK

test with:
jstest /dev/input/js0

jstest from linuxconsoletools 1.4.6  2.fc20   (yum install linuxconsoletools)

works!!
$ jstest /dev/input/js0
Driver version is 2.1.0.
Joystick (Arduino LLC Arduino Micro   ) has 2 axes (X, Y)
and 11 buttons (BtnX, BtnY, BtnZ, BtnTL, BtnTR, BtnTL2, BtnTR2, BtnSelect, LeftBtn, RightBtn, MiddleBtn).
Testing ... (interrupt to exit)
Axes:  0:     0  1:     0 Buttons:  0:off  1:off  2:off  3:off  4:off  5:off  6:off  7:off  8:off  9:off 10:off 
Axes:  0:     0  1:     0 Buttons:  0:on   1:off  2:off  3:off  4:off  5:off  6:off  7:off  8:off  9:off 10:off 
       	      	 	  	    ^

the HID descriptor specifies two analog axes, but there's no code for it in
our modified HID.cpp.  can probably find it in other examples.

last thing I worked on in march 2015 was "joystick3"

what did we do?
modified /usr/share/arduino/hardware/arduino/cores/arduino/USBAPI.h
and /usr/share/arduino/hardware/arduino/cores/arduino/HID.cpp
	 vs ...//USBAPI.h.rpmorig
	 HID.cpp.rpmorig

USBAPI.h - added HID_JOYSTICK section

HID.cpp - added HID_JOYSTICK section with
	gamepad chunk of hid descriptor
	added Gamepad class


other desirable HID functions
	proportional - from A/D potentiometer input
	LED output
---

when we connect the arduino micro board, it connects as 
     idVendor=2341, idProduct=8037;     the HID device

if we push the reset button, it disconnects, then reconnects as
   idVendor=2341, idProduct=0037	     only a ttyACM device
   this is the boot loader
about 8 seconds later, it disconects and reconnects as 2341:8037

the leonardo++ does the same dance, but the IDs are:
    
    2341:8036.0015: input,hidraw5: USB HID
    2341:0036 		USB ACM bootloader

---

when we connect a device with this code (our micro or team leonardo++)
out main desktop mouse stops working.  
Would it help if we removed the HID code for keyboard/mouse?
I hope so.
added more ifdefs. works. 

---

rebuilt for leonardo, nov 30.   
identified as a mouse, but didn't break the system mouse this time.

---

to dump HID descriptors for attached devices.
$ sudo usbhid-dump -ed -m 2341:8036   # VID:PID

002:017:002:DESCRIPTOR         1448943568.776045
 05 01 09 02 A1 01 09 01 A1 00 85 01 05 09 19 01
 29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05
 81 03 05 01 09 30 09 31 09 38 15 81 25 7F 75 08
 95 03 81 06 C0 C0 05 01 09 06 A1 01 85 02 05 07
 19 E0 29 E7 15 00 25 01 75 01 95 08 81 02 95 01
 75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00
 29 65 81 00 C0 05 01 09 05 A1 01 A1 00 85 03 05
 09 19 01 29 08 15 00 25 01 95 04 75 01 81 02 05
 01 09 30 09 31 15 FF 25 01 95 02 75 02 81 02 C0
 C0

after rebuilding without keyboard or mouse, we have:
002:019:002:DESCRIPTOR         1448944717.819932
 05 01 05 01 09 05 A1 01 A1 00 85 03 05 09 19 01
 29 08 15 00 25 01 95 04 75 01 81 02 05 01 09 30
 09 31 15 FF 25 01 95 02 75 02 81 02 C0 C0


can also dump stream of device reports.
$ sudo usbhid-dump -ea -m 2341:8036

002:019:002:STREAM             1448944291.933330
 03 02

002:019:002:STREAM             1448944291.934321
 03 00

(a button press then release)

I think that since our descriptor says we have 8 buttons then two axes,
we really ought to be sending the axis data in the reports too.

--

saved this shorter descriptor - joystick only - in nov2015.save

--

next:
  create a structure for preparing the reports
  support up to 16 buttons
  add "throttle" from analog pot input

button numbers start at 0 according to jstest.
how to expand our API beyond 8 buttons

	keep press/release methods, but change to integer args?
	just pass in the whole button array as byte vector?
	     as per the "move" method in the leojoy example
	     we already do delta-tracking in the main loop anyway

dec 1-2
I think I got 16 buttons coded, but now it gums up the Xorg mouse
again when I run jstest or usbhid-dump on it.  
recover by resetting device to disconnect&reconnect.

usbhid-dump showed the right event reports,
but jstest doesn't show any button presses.
and I get this in log for each button press:
	
Dec  2 00:14:58 viola kernel: [207439.575979] usb 2-4.3: input irq status -75 received
Dec  2 00:14:58 viola kernel: usb 2-4.3: input irq status -75 received

jstest shows:
Joystick (Arduino LLC Arduino Leonardo) has 2 axes (X, Y)
and 16 buttons (BtnX, BtnY, BtnZ, BtnTL, BtnTR, BtnTL2, BtnTR2, BtnSelect, BtnStart, BtnMode, BtnThumbL, BtnThumbR, ?, ?, ?, ?).
Testing ... (interrupt to exit)
Axes:  0:     0  1:     0 Buttons:  0:off  1:off  2:off  3:off  4:off  5:off  6:off  7:off  8:off  9:off 10:off 11:off 12:off 13:off 14:off 15:off 



change back to only 8 buttons,
    0x95, 0x08,                    //     REPORT_COUNT (8)
and jstest works.
still gums up the mouse.
Xorg.0.log shows:


[243549.269] (II) config/udev: Adding input device Arduino LLC Arduino Leonardo (/dev/input/event13)
[243549.269] (II) No input driver specified, ignoring this device.
[243549.269] (II) This device may have been added with another device file.
[243549.270] (II) config/udev: Adding input device Arduino LLC Arduino Leonardo (/dev/input/js0)
[243549.270] (II) No input driver specified, ignoring this device.
[243549.270] (II) This device may have been added with another device file.


which I think is right for 8 buttons.
still gums up the mouse.
change HID to drop analog axis; still gums it up.
       jstest shows the difference; only buttons. 

looking at other stuff in leojoy vs other thing we started with
usage(joystick) vs. usage(gamepad) ?

next:
swap back in what we had previously, does it foul up my mouse still?

experiment dec 2 morning:
if I plug in through the zerolemon USB-3.0 hub with per-port enable buttons,
then the X pointer does not get messed with at all.
works with 16-button code then too.

also works the same with our arduino micro.

next code: proprortional control (throttle or whatever)
